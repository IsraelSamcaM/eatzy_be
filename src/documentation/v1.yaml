openapi: 3.0.0
info:
  title: Dish API
  version: 1.0.0
  description: API endpoints for managing dishes in a restaurant system

components:
  schemas:
    OrderStatus:
      type: string
      enum:
        - PENDING
        - IN_PREPARATION
        - READY
        - CANCELLED
      description: Status of the Order
    DishCategory:
      type: string
      enum:
        - APPETIZER
        - SALAD
        - MAIN_COURSE
        - DESSERT
        - BURGERS
        - TEA
        - SODA
        - JUICE
        - COFFEE
        - OTHER
      description: Category of the dish
    DishType:
      type: string
      enum:
        - FOOD
        - DRINK
      description: Type of the dish (food or drink)
    TableStatus:
      type: string
      enum:
        - AVAILABLE
        - OCCUPIED
        - RESERVED
        - MAINTENANCE
        - DELETED
      description: Type of status for tables
    BasicTableResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Table without details"
        data:
          $ref: '#/components/schemas/Table'
    OrderItemDetail:
      type: object
      properties:
        id_table:
          type: integer
          example: 5
        id_customer:
          type: integer
          example: 12
        id_order:
          type: integer
          example: 42
        id_order_item:
          type: integer
          example: 101
        id_dish:
          type: integer
          example: 8
        name_customer:
          type: string
          example: "John Doe"
        quantity:
          type: integer
          example: 2
        status:
          type: string
          example: "PENDING"
        name_dish:
          type: string
          example: "Margherita Pizza"
        type:
          type: string
          example: "PIZZA"
        description:
          type: string
          example: "Classic pizza with tomato sauce and mozzarella"
        price:
          type: number
          format: float
          example: 12.99
        isAvailable:
          type: boolean
          example: true
        imageUrl:
          type: string
          example: "https://example.com/pizza.jpg"
        prepTime:
          type: integer
          example: 20
    PanelGroup:
      type: object
      properties:
        id:
          type: integer
          description: Order ID (0 for empty groups)
          example: 42
        status:
          type: string
          enum: [PENDING, IN_PREPARATION, READY, CANCELLED]
          example: "IN_PREPARATION"
        mesa_number:
          type: integer
          description: Table number (0 for empty groups)
          example: 5
        itemOrdes:
          type: array
          items:
            $ref: '#/components/schemas/PanelItem'
    DetailedTableResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Table with all details"
        data:
          type: object
          properties:
            id:
              type: integer
            number:
              type: string
            capacity:
              type: integer
            status:
              type: string
              enum: [AVAILABLE, OCCUPIED, RESERVED, MAINTENANCE, DELETED]
            qrCode:
              type: string
            qrCodeUrl:
              type: string
            customers:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  orderItems:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        quantity:
                          type: integer
                        status:
                          type: string
                        notes:
                          type: string
                        dish:
                          $ref: '#/components/schemas/Dish'
                        orderId:
                          type: integer
                        orderStatus:
                          type: string
    SimpleTableResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Table data in simple format"
        data:
          type: array
          items:
            type: object
            properties:
              id_table:
                type: integer
              id_customer:
                type: integer
              id_order:
                type: integer
              id_order_item:
                type: integer
              id_dish:
                type: integer
              name_customer:
                type: string
              quantity:
                type: integer
              status:
                type: string
              name_dish:
                type: string
              type:
                type: string
              description:
                type: string
              price:
                type: number
              isAvailable:
                type: boolean
              imageUrl:
                type: string
              prepTime:
                type: integer
    Dish:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
        description:
          type: string
        price:
          type: number
        isAvailable:
          type: boolean
        imageUrl:
          type: string
        prepTime:
          type: integer
    PanelItem:
      type: object
      properties:
        id_table:
          type: integer
          example: 5
        id_customer:
          type: integer
          example: 12
        id_order:
          type: integer
          example: 42
        id_order_item:
          type: integer
          example: 101
        id_dish:
          type: integer
          example: 8
        name_customer:
          type: string
          example: "Juan Pérez"
        quantity:
          type: integer
          example: 2
        status:
          type: string
          example: "IN_PREPARATION"
        name_dish:
          type: string
          example: "Margherita Pizza"
        type:
          type: string
          example: "PIZZA"
        description:
          type: string
          example: "Classic pizza with tomato sauce and mozzarella"
        price:
          type: number
          format: float
          example: 12.99
        isAvailable:
          type: boolean
          example: true
        imageUrl:
          type: string
          example: "https://example.com/pizza.jpg"
        prepTime:
          type: integer
          example: 20
    WebSocketEvents:
      type: object
      description: |
        El servidor web sockect corre en **ws://localhost:PORT** (en mi caso ws://localhost:8002)
        Eventos emitidos a través de WebSocket:
        
        - **dish_created**: Emitido al crear un plato
          - Data: Dish (el objeto completo del plato creado)
        
        - **dish_updated**: Emitido al actualizar un plato
          - Data: Dish (el objeto completo del plato actualizado)
        
        - **dish_deleted**: Emitido al eliminar un plato
          - Data: { id: number } (solo el ID del plato eliminado)
        
        - **table_created**: Emitido al crear una mesa
          - Data: Table (el objeto completo de la mesa creada)
        
        - **table_occupied**: Emitido al escanear QR de mesa
          - Data: Table (el objeto completo de la mesa ocupada)
        
        - **table_deleted**: Emitido al eliminar una mesa
          - Data: { id: number } (solo el ID de la mesa eliminada)
paths:
  /multimedia/upload:
    post:
      summary: Upload an image
      description: Uploads a single image to Cloudinary. Accepts only .jpg, .jpeg, .png, and .webp formats.
      tags:
        - Multimedia
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file to upload (.jpg, .jpeg, .png, .webp)
      responses:
        '201':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Image uploaded successfully
                  data:
                    type: string
                    example: https://res.cloudinary.com/your_cloud/image/upload/v1234567890/images/sample.jpg
        '400':
          description: Invalid request or unsupported file type
        '500':
          description: Internal server error

  /dish/only/{id}:
    get:
      summary: Get a dish by ID
      description: Retrieve detailed information about a specific dish using its unique ID.
      tags:
        - Dish
      parameters:
        - name: id
          in: path
          description: ID of the dish to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Dish retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data: 
                    type: object
        '404':
          description: Dish not found
        '500':
          description: Server error

  /dish/all:
    get:
      summary: Get all dishes
      description: |
        Retrieve all dishes in the system. Can be filtered by availability.
        
        **Filtering examples:**
        - `/dish/all` - Returns all dishes
        - `/dish/all?isAvailable=true` - Returns only available dishes
        - `/dish/all?isAvailable=false` - Returns only unavailable dishes
        - `/dish/all?category=MAIN_COURSE&isAvailable=true` - Returns all available main course dishes

        **WebSocket Events:**
        - **dish_created**: Se emite cuando se crea un nuevo platillo. El objeto `Dish` es enviado en el payload. Debe agregarse a la lista actual para actualizar la interfaz en tiempo real.
        - **dish_updated**: Se emite cuando un platillo existente es actualizado. El objeto `Dish` actualizado es enviado en el payload. Debe reemplazar al platillo correspondiente en la lista actual para reflejar los cambios en tiempo real.
      tags:
        - Dish
      parameters:
        - name: isAvailable
          in: query
          description: Filter dishes by availability status
          required: false
          schema:
            type: boolean
        - name: category
          in: query
          description: Filter dishes by category
          required: false
          schema:
            $ref: '#/components/schemas/DishCategory'
      responses:
        '200':
          description: List of dishes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items: 
                      type: object
        '500':
          description: Server error

  /dish/all/pagination:
    get:
      summary: Get dishes with pagination
      description: Retrieve dishes with pagination support. Defaults to page 1 with 10 items per page.
      tags:
        - Dish
      parameters:
        - name: page
          in: query
          description: Page number (default 1)
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page (default 10)
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Paginated list of dishes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items: 
                      type: object
                  message:
                    type: string
                    example: "Total: 50, Page: 1, Limit: 10, TotalPages: 5"
        '500':
          description: Server error

  /dish/filter:
    get:
      summary: Filter dishes by criteria
      description: |
        Filter dishes by category, type, or search term. All parameters are optional.
        
        **Examples:**
        - `/dish/filter?category=MAIN_COURSE` - Returns all main course dishes
        - `/dish/filter?type=DRINK` - Returns all drinks
        - `/dish/filter?search=pasta` - Returns dishes with "pasta" in name or description
        - `/dish/filter?isAvailable=true` - Returns all available dishes
        - `/dish/filter?category=DESSERT&type=FOOD ` - Returns all dessert foods
        - `/dish/filter?category=APPETIZER&isAvailable=false` - Returns all unavailable appetizers
        - `/dish/filter?search=salad&isAvailable=true` - Returns all available dishes with "salad" in name or description

        **WebSocket Events:**
        - **dish_created**: Se emite cuando se crea un nuevo platillo. El objeto `Dish` es enviado en el payload. Debe agregarse a la lista actual para actualizar la interfaz en tiempo real.
        - **dish_updated**: Se emite cuando un platillo existente es actualizado. El objeto `Dish` actualizado es enviado en el payload. Debe reemplazar al platillo correspondiente en la lista actual para reflejar los cambios en tiempo real.
      tags:
        - Dish
      parameters:
        - name: category
          in: query
          description: Filter by dish category
          required: false
          schema:
            $ref: '#/components/schemas/DishCategory'
        - name: type
          in: query
          description: Filter by dish type (FOOD or DRINK)
          required: false
          schema:
            $ref: '#/components/schemas/DishType'
        - name: search
          in: query
          description: Search term to filter by name or description
          required: false
          schema:
            type: string
        - name: isAvailable
          in: query
          description: Filter by availability status
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Filtered dishes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
        '400':
          description: Invalid type or category provided
        '500':
          description: Server error

  /dish/create:
    post:
      summary: Create a new dish
      description: |
        Crea un nuevo plato.
        
        **Emite evento WebSocket:**
        - Nombre: dish_created
        - Datos: El objeto Dish completo recién creado
      tags:
        - Dish
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - type
                - category
                - prepTime
              properties:
                name:
                  type: string
                  description: Name of the dish (must be unique)
                description:
                  type: string
                  description: Description of the dish
                price:
                  type: number
                  description: Price of the dish
                isAvailable:
                  type: boolean
                  description: Availability status (default true)
                  default: true
                category:
                  $ref: '#/components/schemas/DishCategory'
                type:
                  $ref: '#/components/schemas/DishType'
                imageUrl:
                  type: string
                  description: URL of the dish image
                prepTime:
                  type: integer
                  description: Preparation time in minutes
              example:
                name: "Pique Macho"
                description: "Plato típico boliviano con carne, papas y huevo"
                price: 35.5
                isAvailable: true
                category: "MAIN_COURSE"
                type: "FOOD"
                imageUrl: "https://ejemplo.com/imagen.jpg"
                prepTime: 25
      responses:
        '201':
          description: Dish created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: "Dish created successfully"
                  data:
                    type: object
        '400':
          description: Missing required fields or invalid data
        '409':
          description: Duplicate dish name
        '500':
          description: Server error

  /dish/update/{id}:
    patch:
      summary: Update an existing dish
      description: |
        Update an existing dish. Only include the fields you want to update.
        
        **Partial update example:**
        - You can send just `{ "price": 40 }` to update only the price
        - Or `{ "isAvailable": false, "description": "New description" }` to update multiple fields

        **Emite evento WebSocket:**
        - Nombre: dish_updated
        - Datos: El objeto Dish completo actualizado
      tags:
        - Dish
      parameters:
        - name: id
          in: path
          description: ID of the dish to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                isAvailable:
                  type: boolean
                category:
                  $ref: '#/components/schemas/DishCategory'
                type:
                  $ref: '#/components/schemas/DishType'
                imageUrl:
                  type: string
                prepTime:
                  type: integer
              example:
                name: "Salteñas"
                price: 10.5
                isAvailable: true
                category: "APPETIZER"
                type: "FOOD"
      responses:
        '200':
          description: Dish updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: "Dish updated successfully"
                  data:
                    type: object
        '400':
          description: Invalid type or category
        '404':
          description: Dish not found
        '409':
          description: Duplicate dish name
        '500':
          description: Server error

  /dish/delete/{id}:
    delete:
      summary: Delete a dish by ID
      description: |
        Permanently delete a dish from the system.
    
        **Emite evento WebSocket:**
            - Nombre: dish_deleted
            - Datos: { id: number } (ID del plato eliminado)
      tags:
        - Dish
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the dish to delete
      responses:
        '200':
          description: Dish deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: Dish not found
        '500':
          description: Server error
  /table/all:
    get:
      summary: Get all tables
      description: | 
        Retrieve all tables with optional status filtering. Returns only non-deleted tables.
        **WebSocket Events:**
        - **table_created**: Se emite cuando se crea una nueva Mesa. El objeto `Table` es enviado en el payload. Debe agregarse a la lista actual para actualizar la interfaz en tiempo real.
        - **table_updated**: Se emite cuando una Mesa existente es actualizado. El objeto `Table` actualizado es enviado en el payload. Debe reemplazar a la mesa correspondiente en la lista actual para reflejar los cambios en tiempo real.
        - **table_deleted**: Se emite cuando una Mesa existente es eliminada. El objeto con la propiedad `id`, correspondiente al identificador de la mesa eliminada. Debe buszarse en la lista de mesas y quitarla para reflejar los cambios en tiempo real.
      tags:
        - Table
      parameters:
        - name: status
          in: query
          description: Filter tables by status (AVAILABLE, OCCUPIED, RESERVED, MAINTENANCE)
          required: false
          schema:
            type: string
            enum:
              - AVAILABLE
              - OCCUPIED
              - RESERVED
              - MAINTENANCE
      responses:
        '200':
          description: Tables retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
        '400':
          description: Invalid status value provided
        '500':
          description: Server error
  /table/only/{id}:
    get:
      summary: Get table by ID with flexible detail levels
      description: |
        Retrieve table information in three possible formats:
        1. **Basic**: Only table metadata (default).
        2. **Detailed**: Includes customers, orders, and assigned dishes.
        3. **Simple**: Flattened structure optimized for client displays. **(RECOMENDADO - CESAR)**
      tags:
        - Table
      parameters:
        - name: id
          in: path
          description: ID of the table to retrieve
          required: true
          schema:
            type: integer
            example: 5
        - name: includeDetails
          in: query
          description: Include full order details (customers, orders, dishes)
          required: false
          schema:
            type: boolean
            example: true
        - name: simple
          in: query
          description: Return simplified flattened structure
          required: false
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: Success. Response format varies by query parameters.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BasicTableResponse'
                  - $ref: '#/components/schemas/DetailedTableResponse'
                  - $ref: '#/components/schemas/SimpleTableResponse'
        '404':
          description: Table not found or marked as deleted
        '500':
          description: Server error
  /table/scan:
    post:
      summary: Handle QR scan and assign customer
      description: |
        Find a table by QR code, update its status to **OCCUPIED**, and create a temporary customer.
        
        **WebSocket Event:**
        - Event: `table_occupied`
        - Data: Updated `Table` object.
      tags:
        - Table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                qrCode:
                  type: string
                  example: "TABLECOD10"
                nameCustomer:
                  type: string
                  example: "Israel Samk"
              required:
                - qrCode
                - nameCustomer
      responses:
        '200':
          description: Success. Returns updated table and customer.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Table found and status updated"
                  data:
                    type: object
                    properties:
                      table:
                        $ref: '#/components/schemas/Table'
                      customer:
                        $ref: '#/components/schemas/TemporaryCustomer'
        '404':
          description: Table not found.
        '409':
          description: Conflict. Table is in MAINTENANCE/DELETED status.
        '500':
          description: Server error.
  /table/create:
    post:
      summary: Create a new table with QR code
      description: |
        Create a new table and generate its QR code automatically.

        **Emite evento WebSocket:**
        - Nombre: table_created
        - Datos: El objeto Table completo recién creado
      tags:
        - Table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - number
                - capacity
                - status
              properties:
                number:
                  type: integer
                  description: Table number (must be unique)
                capacity:
                  type: integer
                  description: Maximum number of people the table can accommodate
                status:
                  type: string
                  enum:
                    - AVAILABLE
                    - OCCUPIED
                    - RESERVED
                    - MAINTENANCE
                  description: Initial status of the table
              example:
                number: 5
                capacity: 4
                status: "AVAILABLE"
      responses:
        '201':
          description: Table created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Table'
        '400':
          description: Missing required fields or invalid status
        '409':
          description: Table with this number already exists
        '500':
          description: Server error

  /table/delete/{id}:
    delete:
      summary: Delete a table (soft delete)
      description: |
        Mark a table as deleted (soft delete) and change its status to MAINTENANCE.

        **Emite evento WebSocket:**
        - Nombre: table_deleted
        - Datos: { id: number } (ID de la mesa eliminada)
      tags:
        - Table
      parameters:
        - name: id
          in: path
          description: ID of the table to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Table deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Table'
        '400':
          description: Table has active orders or already deleted
        '404':
          description: Table not found
        '500':
          description: Server error
  /table/update/{id}:
    patch:
      summary: Update table properties
      description: |
        Update a table's capacity and/or status.  
        **Emits WebSocket Event:** `table_updated` with the updated table object.
      tags:
        - Table
      parameters:
        - name: id
          in: path
          description: ID of the table to update
          required: true
          schema:
            type: integer
            example: 5
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                capacity:
                  type: integer
                  minimum: 1
                  description: New seating capacity (must be positive)
                  example: 4
                status:
                  type: string
                  enum: [AVAILABLE, OCCUPIED, RESERVED, MAINTENANCE, DELETED]
                  description: New status (converted to uppercase automatically)
                  example: "OCCUPIED"
              required: []
              anyOf:
                - required: [capacity]
                - required: [status]
      responses:
        '200':
          description: Table updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Table updated successfully"
                  data:
                    $ref: '#/components/schemas/Table'
        '400':
          description: |
            Bad Request. Possible reasons:
            - No fields provided
            - Invalid status value
            - Invalid capacity (non-positive)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid type. Must be one of: AVAILABLE, OCCUPIED, RESERVED, MAINTENANCE, DELETED"
        '404':
          description: Table not found (invalid ID)
        '500':
          description: Server error
  /order/create:
    post:
      summary: Create a new order with order items
      description: |
        Creates an order for a customer at a specific table, including multiple dishes.
        Emits WebSocket events for each created order item.
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_table:
                  type: integer
                  description: ID of the table where the order is placed
                  example: 5
                id_customer:
                  type: integer
                  description: ID of the customer placing the order
                  example: 12
                dishes:
                  type: array
                  description: List of dishes to order
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: Dish ID
                        example: 8
                      quantity:
                        type: integer
                        description: Quantity of this dish
                        example: 2
                    required:
                      - id
                      - quantity
              required:
                - id_table
                - id_customer
                - dishes
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Order and Order Items created successfully"
                  data:
                    type: object
                    properties:
                      id_order:
                        type: integer
                        description: ID of the created order
                        example: 42
                      items:
                        type: array
                        description: Created order items with full details
                        items:
                          $ref: '#/components/schemas/OrderItemDetail'
        '400':
          description: Missing required fields or invalid request format
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Missing required fields: id_table, id_customer, dishes"
        '404':
          description: Table, customer or dishes not found
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: false
                      message:
                        type: string
                        example: "Table not found"
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: false
                      message:
                        type: string
                        example: "Customer not found at this table"
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: false
                      message:
                        type: string
                        example: "Some dishes not found: 8, 15"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Error creating order"
  /order/update/{id}:
    patch:
      summary: Update an order item's status
      description: |
        Updates the status of a specific order item and emits a WebSocket event.
        **WebSocket Event:** `order_item_updated` with full item details.
      tags:
        - Order
      parameters:
        - name: id
          in: path
          description: ID of the order item to update
          required: true
          schema:
            type: integer
            example: 45
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [PENDING, IN_PROGRESS, READY, DELIVERED, CANCELLED]
                  description: New status for the order item
                  example: "IN_PROGRESS"
              required:
                - status
      responses:
        '200':
          description: Order item updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Order item updated successfully"
                  data:
                    $ref: '#/components/schemas/OrderItemDetail'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid type. Must be one of: PENDING, IN_PROGRESS, READY, DELIVERED, CANCELLED"
        '404':
          description: Order item not found
        '500':
          description: Server error
  /order/panel:
    get:
      summary: Get all order items grouped by status for panel display
      description: |
        Retrieves order items grouped by status and table number, sorted by:
        1. Status priority (PENDING > IN_PREPARATION > READY > CANCELLED)
        2. Creation time (oldest first)
        
        Includes empty groups for all statuses even when no items exist.
      tags:
        - Order
      responses:
        '200':
          description: Successfully retrieved panel data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PanelGroup'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Internal server error"
                  error:
                    type: string
                    example: "PrismaClientKnownRequestError: ..."