openapi: 3.0.0
info:
  title: Dish API
  version: 1.0.0
  description: API endpoints for managing dishes in a restaurant system

components:
  schemas:
    DishCategory:
      type: string
      enum:
        - APPETIZER
        - SALAD
        - MAIN_COURSE
        - DESSERT
        - BURGERS
        - TEA
        - SODA
        - JUICE
        - COFFEE
        - OTHER
      description: Category of the dish
    DishType:
      type: string
      enum:
        - FOOD
        - DRINK
      description: Type of the dish (food or drink)
    TableStatus:
      type: string
      enum:
        - AVAILABLE
        - OCCUPIED
        - RESERVED
        - MAINTENANCE
      description: Type of status for tables
    WebSocketEvents:
      type: object
      description: |
        El servidor web sockect corre en **ws://localhost:PORT** (en mi caso ws://localhost:8002)
        Eventos emitidos a través de WebSocket:
        
        - **dish_created**: Emitido al crear un plato
          - Data: Dish (el objeto completo del plato creado)
        
        - **dish_updated**: Emitido al actualizar un plato
          - Data: Dish (el objeto completo del plato actualizado)
        
        - **dish_deleted**: Emitido al eliminar un plato
          - Data: { id: number } (solo el ID del plato eliminado)
        
        - **table_created**: Emitido al crear una mesa
          - Data: Table (el objeto completo de la mesa creada)
        
        - **table_occupied**: Emitido al escanear QR de mesa
          - Data: Table (el objeto completo de la mesa ocupada)
        
        - **table_deleted**: Emitido al eliminar una mesa
          - Data: { id: number } (solo el ID de la mesa eliminada)
paths:
  /multimedia/upload:
    post:
      summary: Upload an image
      description: Uploads a single image to Cloudinary. Accepts only .jpg, .jpeg, .png, and .webp formats.
      tags:
        - Multimedia
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file to upload (.jpg, .jpeg, .png, .webp)
      responses:
        '201':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Image uploaded successfully
                  data:
                    type: string
                    example: https://res.cloudinary.com/your_cloud/image/upload/v1234567890/images/sample.jpg
        '400':
          description: Invalid request or unsupported file type
        '500':
          description: Internal server error

  /dish/only/{id}:
    get:
      summary: Get a dish by ID
      description: Retrieve detailed information about a specific dish using its unique ID.
      tags:
        - Dish
      parameters:
        - name: id
          in: path
          description: ID of the dish to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Dish retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data: 
                    type: object
        '404':
          description: Dish not found
        '500':
          description: Server error

  /dish/all:
    get:
      summary: Get all dishes
      description: |
        Retrieve all dishes in the system. Can be filtered by availability.
        
        **Filtering examples:**
        - `/dish/all` - Returns all dishes
        - `/dish/all?isAvailable=true` - Returns only available dishes
        - `/dish/all?isAvailable=false` - Returns only unavailable dishes
        - `/dish/all?category=MAIN_COURSE&isAvailable=true` - Returns all available main course dishes
      tags:
        - Dish
      parameters:
        - name: isAvailable
          in: query
          description: Filter dishes by availability status
          required: false
          schema:
            type: boolean
        - name: category
          in: query
          description: Filter dishes by category
          required: false
          schema:
            $ref: '#/components/schemas/DishCategory'
      responses:
        '200':
          description: List of dishes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items: 
                      type: object
        '500':
          description: Server error

  /dish/all/pagination:
    get:
      summary: Get dishes with pagination
      description: Retrieve dishes with pagination support. Defaults to page 1 with 10 items per page.
      tags:
        - Dish
      parameters:
        - name: page
          in: query
          description: Page number (default 1)
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page (default 10)
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Paginated list of dishes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items: 
                      type: object
                  message:
                    type: string
                    example: "Total: 50, Page: 1, Limit: 10, TotalPages: 5"
        '500':
          description: Server error

  /dish/filter:
    get:
      summary: Filter dishes by criteria
      description: |
        Filter dishes by category, type, or search term. All parameters are optional.
        
        **Examples:**
        - `/dish/filter?category=MAIN_COURSE` - Returns all main course dishes
        - `/dish/filter?type=DRINK` - Returns all drinks
        - `/dish/filter?search=pasta` - Returns dishes with "pasta" in name or description
        - `/dish/filter?isAvailable=true` - Returns all available dishes
        - `/dish/filter?category=DESSERT&type=FOOD ` - Returns all dessert foods
        - `/dish/filter?category=APPETIZER&isAvailable=false` - Returns all unavailable appetizers
        - `/dish/filter?search=salad&isAvailable=true` - Returns all available dishes with "salad" in name or description
      tags:
        - Dish
      parameters:
        - name: category
          in: query
          description: Filter by dish category
          required: false
          schema:
            $ref: '#/components/schemas/DishCategory'
        - name: type
          in: query
          description: Filter by dish type (FOOD or DRINK)
          required: false
          schema:
            $ref: '#/components/schemas/DishType'
        - name: search
          in: query
          description: Search term to filter by name or description
          required: false
          schema:
            type: string
        - name: isAvailable
          in: query
          description: Filter by availability status
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Filtered dishes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
        '400':
          description: Invalid type or category provided
        '500':
          description: Server error

  /dish/create:
    post:
      summary: Create a new dish
      description: |
        Crea un nuevo plato.
        
        **Emite evento WebSocket:**
        - Nombre: dish_created
        - Datos: El objeto Dish completo recién creado
      tags:
        - Dish
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - type
                - category
                - prepTime
              properties:
                name:
                  type: string
                  description: Name of the dish (must be unique)
                description:
                  type: string
                  description: Description of the dish
                price:
                  type: number
                  description: Price of the dish
                isAvailable:
                  type: boolean
                  description: Availability status (default true)
                  default: true
                category:
                  $ref: '#/components/schemas/DishCategory'
                type:
                  $ref: '#/components/schemas/DishType'
                imageUrl:
                  type: string
                  description: URL of the dish image
                prepTime:
                  type: integer
                  description: Preparation time in minutes
              example:
                name: "Pique Macho"
                description: "Plato típico boliviano con carne, papas y huevo"
                price: 35.5
                isAvailable: true
                category: "MAIN_COURSE"
                type: "FOOD"
                imageUrl: "https://ejemplo.com/imagen.jpg"
                prepTime: 25
      responses:
        '201':
          description: Dish created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: "Dish created successfully"
                  data:
                    type: object
        '400':
          description: Missing required fields or invalid data
        '409':
          description: Duplicate dish name
        '500':
          description: Server error

  /dish/update/{id}:
    patch:
      summary: Update an existing dish
      description: |
        Update an existing dish. Only include the fields you want to update.
        
        **Partial update example:**
        - You can send just `{ "price": 40 }` to update only the price
        - Or `{ "isAvailable": false, "description": "New description" }` to update multiple fields

        **Emite evento WebSocket:**
        - Nombre: dish_updated
        - Datos: El objeto Dish completo actualizado
      tags:
        - Dish
      parameters:
        - name: id
          in: path
          description: ID of the dish to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                isAvailable:
                  type: boolean
                category:
                  $ref: '#/components/schemas/DishCategory'
                type:
                  $ref: '#/components/schemas/DishType'
                imageUrl:
                  type: string
                prepTime:
                  type: integer
              example:
                name: "Salteñas"
                price: 10.5
                isAvailable: true
                category: "APPETIZER"
                type: "FOOD"
      responses:
        '200':
          description: Dish updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: "Dish updated successfully"
                  data:
                    type: object
        '400':
          description: Invalid type or category
        '404':
          description: Dish not found
        '409':
          description: Duplicate dish name
        '500':
          description: Server error

  /dish/delete/{id}:
    delete:
      summary: Delete a dish by ID
      description: |
        Permanently delete a dish from the system.
    
        **Emite evento WebSocket:**
            - Nombre: dish_deleted
            - Datos: { id: number } (ID del plato eliminado)
      tags:
        - Dish
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the dish to delete
      responses:
        '200':
          description: Dish deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: Dish not found
        '500':
          description: Server error
  /table/all:
    get:
      summary: Get all tables
      description: Retrieve all tables with optional status filtering. Returns only non-deleted tables.
      tags:
        - Table
      parameters:
        - name: status
          in: query
          description: Filter tables by status (AVAILABLE, OCCUPIED, RESERVED, MAINTENANCE)
          required: false
          schema:
            type: string
            enum:
              - AVAILABLE
              - OCCUPIED
              - RESERVED
              - MAINTENANCE
      responses:
        '200':
          description: Tables retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Table'
        '400':
          description: Invalid status value provided
        '500':
          description: Server error
  /table/only/{id}:
    get:
      summary: Get table by ID
      description: Retrieve detailed information about a specific table including optional order details.
      tags:
        - Table
      parameters:
        - name: id
          in: path
          description: ID of the table to retrieve
          required: true
          schema:
            type: integer
        - name: includeDetails
          in: query
          description: Include order details with items and dishes (true/false)
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Table retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/TableWithDetails'
        '404':
          description: Table not found
        '500':
          description: Server error
  /table/scan/{qrCodeUrl}:
    get:
      summary: Handle QR scan
      description: |
        Find table by QR code URL and update its status to OCCUPIED.

        **Emite evento WebSocket:**
        - Nombre: table_occupied
        - Datos: El objeto Table completo actualizado
      tags:
        - Table
      parameters:
        - name: qrCodeUrl
          in: path
          description: URL of the QR code to scan
          required: true
          schema:
            type: string
      responses:
        '200':
          description: QR scanned successfully, table status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Table'
        '404':
          description: Table not found for given QR code
        '500':
          description: Server error
  /table/create:
    post:
      summary: Create a new table with QR code
      description: |
        Create a new table and generate its QR code automatically.

        **Emite evento WebSocket:**
        - Nombre: table_created
        - Datos: El objeto Table completo recién creado
      tags:
        - Table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - number
                - capacity
                - status
              properties:
                number:
                  type: integer
                  description: Table number (must be unique)
                capacity:
                  type: integer
                  description: Maximum number of people the table can accommodate
                status:
                  type: string
                  enum:
                    - AVAILABLE
                    - OCCUPIED
                    - RESERVED
                    - MAINTENANCE
                  description: Initial status of the table
              example:
                number: 5
                capacity: 4
                status: "AVAILABLE"
      responses:
        '201':
          description: Table created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Table'
        '400':
          description: Missing required fields or invalid status
        '409':
          description: Table with this number already exists
        '500':
          description: Server error

  /table/delete/{id}:
    delete:
      summary: Delete a table (soft delete)
      description: |
        Mark a table as deleted (soft delete) and change its status to MAINTENANCE.

        **Emite evento WebSocket:**
        - Nombre: table_deleted
        - Datos: { id: number } (ID de la mesa eliminada)
      tags:
        - Table
      parameters:
        - name: id
          in: path
          description: ID of the table to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Table deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Table'
        '400':
          description: Table has active orders or already deleted
        '404':
          description: Table not found
        '500':
          description: Server error
